import sys
print(">>> PYTHON VERSION:", sys.version)

# bot.py ‚Äî Telegram bot: –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É, —Ç–∞—Ä–∏—Ñ—ã, –∏—Å—Ç–æ—Ä–∏—è, –æ–ø–ª–∞—Ç–∞ —Å —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π (–ÆKassa)
# –ü–æ–º–µ—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ venv –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, types
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ContentType
from collections import defaultdict
from aiohttp import web


# –î–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –≤ –æ–¥–∏–Ω –ø–æ—Å—Ç
media_groups = defaultdict(list)



# ------------------ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ) ------------------
API_TOKEN = "8423035573:AAHo53sPuZJXbGXLhW5-EThbdXM5GrCULDQ"
BOT_USERNAME = "cat777_cash_bot"
GROUP_ID = -1002522022019
ADMIN_ID = 827299190

# ---------------- Webhook settings ----------------
# –ü—É—Ç—å webhook ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã —É—Å–ª–æ–∂–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"

# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π hostname –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_HOSTNAME.
# –°–æ–±–µ—Ä—ë–º –ø—É–±–ª–∏—á–Ω—ã–π URL webhook
RENDER_HOST = os.environ.get("RENDER_EXTERNAL_HOSTNAME")  # –Ω–∞ Render –≤—Ä–æ–¥–µ cat-bot-4.onrender.com
PORT = int(os.environ.get("PORT", 10000))

if RENDER_HOST:
    WEBHOOK_URL = f"https://{RENDER_HOST}{WEBHOOK_PATH}"
else:
    # fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Telegram —Ç—Ä–µ–±—É–µ—Ç HTTPS ‚Äî –¥–ª—è –ª–æ–∫–∞–ª–∏ –Ω—É–∂–µ–Ω ngrok)
    WEBHOOK_URL = f"http://localhost:{PORT}{WEBHOOK_PATH}"

# Provider token –¥–ª—è Telegram Payments
PROVIDER_TOKEN = "390540012:LIVE:77400"
YOOKASSA_SHOP_ID = "1151636"
YOOKASSA_SECRET_KEY = "live_9WZWrOx1vsciG0JzhQqb8fP_JdPwvLJ3YSJBbc1acBE"

USERS_FILE = "users_data.json"


# ------------------ –¢–∞—Ä–∏—Ñ—ã ------------------
TARIFFS = {
    "free": {"price": 0, "posts_per_day": 1, "pin_limit": 0, "delay": False},
    "pro": {"price": 200, "posts_per_day": 3, "pin_limit": 2, "delay": True},
    "premium": {"price": 1000, "posts_per_day": 15, "pin_limit": 5, "delay": True},
}

# ------------------ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ------------------
def load_users() -> Dict[str, Any]:
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return {str(k): v for k, v in data.items()}
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å users_data.json ‚Äî –Ω–∞—á–Ω–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return {}
    return {}

def save_users(data: Dict[str, Any]) -> None:
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ users_data.json")

users_data: Dict[str, Any] = load_users()

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ------------------
def init_user(user_id: int) -> Dict[str, Any]:
    key = str(user_id)
    if key not in users_data:
        users_data[key] = {
            "tariff": "free",
            "posts_today": 0,
            "last_post_day": None,
            "history": [],  # —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ (–±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 5)
            "email": None,
            "pending_tariff": None,
            "payments": []
        }
        save_users(users_data)
    # –∞–¥–º–∏–Ω ‚Äî –≤–µ—á–Ω—ã–π –ø—Ä–µ–º–∏—É–º (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if key == str(ADMIN_ID):
        users_data[key]["tariff"] = "premium"
        save_users(users_data)
    return users_data[key]

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –±—ã–ª
init_user(ADMIN_ID)

# ------------------ FSM ------------------
class States(StatesGroup):
    waiting_for_post = State()
    waiting_for_schedule_time = State()
    waiting_for_email_for_payment = State()
    waiting_for_edit_index = State()

# ------------------ –ë–æ—Ç ------------------
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ------------------ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–≤ –ø–∞–º—è—Ç—å) ------------------
scheduled_posts: List[Dict[str, Any]] = []  # –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: {"time": datetime, "post": post_dict, "user_id": user_id}

async def scheduled_post_worker():
    while True:
        now = datetime.utcnow()
        for task in list(scheduled_posts):
            if task["time"] <= now:
                ukey = str(task["user_id"])
                init_user(task["user_id"])

                if can_post(task["user_id"]):
                    await send_post_to_group(task["post"])
                    register_post(task["user_id"])

                    users_data[ukey]["history"].append(task["post"])
                    # trim history to last 5
                    if len(users_data[ukey]["history"]) > 5:
                        users_data[ukey]["history"] = users_data[ukey]["history"][-5:]
                    save_users(users_data)
                else:
                    try:
                        await bot.send_message(task["user_id"], "‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                    except:
                        pass

                scheduled_posts.remove(task)

        await asyncio.sleep(15)


# ------------------ K–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
def main_menu_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="create_post"),
        types.InlineKeyboardButton("üí≥ –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="change_tariff"),
        types.InlineKeyboardButton("üìú –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="my_posts"),
    )
    return kb

def publish_choice_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üìå –°—Ä–∞–∑—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_now"),
        types.InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_post")
    )
    return kb

def make_tariff_kb(user_tariff: str) -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=1)
    for name, info in TARIFFS.items():
        if name == "free":
            continue
        label = f"{name.capitalize()} ‚Äî {info['price']}‚ÇΩ/–º–µ—Å, {info['posts_per_day']} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å"
        if name == user_tariff:
            label += " (—Ç–µ–∫—É—â–∏–π)"
        kb.add(types.InlineKeyboardButton(label, callback_data=f"pay:{name}"))
    return kb

# ------------------ –ü–æ–º–æ—â–Ω–∏–∫–∏ ------------------
async def send_post_to_group(post: Dict[str, Any]) -> None:
    try:
        if post["type"] == "text":
            await bot.send_message(GROUP_ID, post["text"])
        elif post["type"] == "photo":
            await bot.send_photo(GROUP_ID, post["file_id"], caption=post.get("caption"))
        elif post["type"] == "video":
            await bot.send_video(GROUP_ID, post["file_id"], caption=post.get("caption"))
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø—É")

# ------------------ –•–µ–Ω–¥–ª–µ—Ä—ã ------------------

@dp.message_handler(commands=["start"])
async def on_start(message: types.Message):
    # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–∫—É
    if message.chat.type != types.ChatType.PRIVATE:
        await message.reply(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ó–î–ï–°–¨ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–∫—É: @{BOT_USERNAME}")
        return

    # –≤ –ª–∏—á–∫–µ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–µ–Ω—é
    init_user(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫: –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
@dp.callback_query_handler(lambda c: c.data == "create_post")
async def cb_create_post(callback: types.CallbackQuery):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await callback.answer()
    user = init_user(callback.from_user.id)
    today = datetime.now().day
    if user.get("last_post_day") != today:
        user["posts_today"] = 0
        user["last_post_day"] = today
        save_users(users_data)
    tariff = TARIFFS[user["tariff"]]
    if user.get("posts_today", 0) >= tariff["posts_per_day"]:
        # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–º–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞
        await callback.message.answer(
            f"‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {user['tariff'].capitalize()}. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=make_tariff_kb(user["tariff"])
        )
        return
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=None)
    await States.waiting_for_post.set()

# –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "change_tariff")
async def cb_change_tariff(callback: types.CallbackQuery):
    await callback.answer()
    user = init_user(callback.from_user.id)
    kb = make_tariff_kb(user["tariff"])
    await callback.message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {user['tariff'].capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è pay:<tariff>
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("pay:"))
async def cb_pay(callback: types.CallbackQuery):
    await callback.answer()
    user = init_user(callback.from_user.id)
    _, tariff_name = callback.data.split(":", 1)
    if tariff_name not in TARIFFS or tariff_name == "free":
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    # –µ—Å–ª–∏ –Ω–µ—Ç email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º email (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)
    if not user.get("email"):
        users_data[str(callback.from_user.id)]["pending_tariff"] = tariff_name
        save_users(users_data)
        await callback.message.answer("–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à email.")
        await States.waiting_for_email_for_payment.set()
        return

    # –µ—Å–ª–∏ email –µ—Å—Ç—å ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º provider_data –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
    await send_invoice_for_tariff(callback.from_user.id, tariff_name)

# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π: –∑–∞–ø—Ä–æ—Å email -> –æ—Ç–ø—Ä–∞–≤–∫–∞ invoice
@dp.message_handler(state=States.waiting_for_email_for_payment, content_types=types.ContentTypes.TEXT)
async def email_for_payment_handler(message: types.Message, state: FSMContext):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    email = message.text.strip()
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if "@" not in email or "." not in email:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–ø—Ä–∏–º–µ—Ä: example@mail.ru).")
        return
    key = str(message.from_user.id)
    init_user(message.from_user.id)
    users_data[key]["email"] = email
    pending = users_data[key].get("pending_tariff")
    save_users(users_data)
    await message.reply(f"Email {email} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –§–æ—Ä–º–∏—Ä—É—é —Å—á—ë—Ç...")
    if pending:
        await send_invoice_for_tariff(message.from_user.id, pending)
        users_data[key]["pending_tariff"] = None
        save_users(users_data)
    await state.finish()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ (—Å provider_data –¥–ª—è –ÆKassa)
async def send_invoice_for_tariff(user_id: int, tariff_name: str):
    user = init_user(user_id)
    tariff = TARIFFS[tariff_name]
    price = tariff["price"]
    # –§–æ—Ä–º–∏—Ä—É–µ–º provider_data.receipt
    receipt = {
        "customer": {},
        "items": [
            {
                "description": f"–¢–∞—Ä–∏—Ñ {tariff_name.capitalize()}",
                "quantity": 1,
                "amount": {"value": f"{price:.2f}", "currency": "RUB"},
                "vat_code": 1,
                "payment_mode": "full_payment",
                "payment_subject": "service"
            }
        ],
        "tax_system_code": 1
    }
    # –¥–æ–±–∞–≤–∏–º email –∏–ª–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) phone
    if user.get("email"):
        receipt["customer"]["email"] = user["email"]
    # provider_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON
    provider_data = {"receipt": receipt}

    payload = f"tariff:{tariff_name}:{user_id}"  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
    try:
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_name.capitalize()}",
            description=f"–¢–∞—Ä–∏—Ñ {tariff_name.capitalize()} ‚Äî {tariff['posts_per_day']} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å",
            payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=[LabeledPrice(label=f"{tariff_name.capitalize()} —Ç–∞—Ä–∏—Ñ", amount=int(price * 100))],
            need_email=True,
            provider_data=json.dumps(provider_data)
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice")
        try:
            await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass

# PreCheckoutQuery ‚Äî –æ—Ç–≤–µ—á–∞–µ–º Telegram —á—Ç–æ –≤—Å—ë –æ–∫
@dp.pre_checkout_query_handler(lambda query: True)
async def precheckout_handler(pre_checkout_q: PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ answer_pre_checkout_query")

# Successful payment
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    try:
        payload = message.successful_payment.invoice_payload  # —Ñ–æ—Ä–º–∞—Ç: tariff:<name>:<user_id>
        parts = payload.split(":")
        if len(parts) != 3 or parts[0] != "tariff":
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –≤ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ: %s", payload)
            await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ payload –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        tariff_name = parts[1]
        user_id = int(parts[2])
        key = str(user_id)
        init_user(user_id)
        users_data[key]["tariff"] = tariff_name
        users_data[key]["posts_today"] = 0
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º provider_payment_charge_id (–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ)
        charge_id = getattr(message.successful_payment, "provider_payment_charge_id", None)
        if charge_id:
            users_data[key].setdefault("payments", []).append({
                "tariff": tariff_name,
                "date": datetime.utcnow().isoformat(),
                "provider_payment_charge_id": charge_id
            })
        save_users(users_data)
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚Äî —Ç–∞—Ä–∏—Ñ {tariff_name.capitalize()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_menu_kb())
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã")
        await message.answer("–ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–∫–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ø–æ—Å—Ç—ã')
@dp.callback_query_handler(lambda c: c.data == "my_posts")
async def cb_my_posts(callback: types.CallbackQuery):
    await callback.answer()
    user = init_user(callback.from_user.id)
    hist = user.get("history", [])
    if not hist:
        await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_kb())
        return
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ 5
    for idx, p in enumerate(hist[-5:][::-1]):  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –æ—Ç –Ω–æ–≤–µ–π—à–µ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É
        index_real = len(hist) - 1 - idx  # –∏–Ω–¥–µ–∫—Å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if p["type"] == "text":
            preview = p["text"][:1000]
            await callback.message.answer(preview, reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton(f"üîÅ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"repost:{index_real}"),
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{index_real}")
            ))
        elif p["type"] == "photo":
            preview = p.get("caption", "")
            await callback.message.answer(preview, reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton(f"üîÅ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"repost:{index_real}"),
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{index_real}")
            ))
        elif p["type"] == "video":
            preview = p.get("caption", "")
            await callback.message.answer(preview, reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton(f"üîÅ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"repost:{index_real}"),
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{index_real}")
            ))

# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è (repost:<idx>) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("repost:"))
async def cb_repost(callback: types.CallbackQuery):
    await callback.answer()
    _, idx_str = callback.data.split(":", 1)
    try:
        idx = int(idx_str)
    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç–∞.")
        return

    user = init_user(callback.from_user.id)
    hist = user.get("history", [])
    if idx < 0 or idx >= len(hist):
        await callback.message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if not can_post(callback.from_user.id):
        await callback.message.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.")
        return

    post = hist[idx]
    await send_post_to_group(post)
    register_post(callback.from_user.id)

    await callback.message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!", reply_markup=main_menu_kb())



# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ç–æ–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç; –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏)
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("edit:"))
async def cb_edit(callback: types.CallbackQuery):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await callback.answer()
    _, idx_str = callback.data.split(":", 1)
    try:
        idx = int(idx_str)
    except ValueError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    key = str(callback.from_user.id)
    init_user(callback.from_user.id)
    hist = users_data[key].get("history", [])
    if idx < 0 or idx >= len(hist):
        await callback.message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å –≤ state
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ (–≤ –ø–∞–º—è—Ç–∏) ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ users_data, –Ω–æ –±–µ–∑ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–ª—è
    users_data[key]["_editing_index"] = idx
    save_users(users_data)
    await States.waiting_for_edit_index.set()

@dp.message_handler(state=States.waiting_for_edit_index, content_types=types.ContentTypes.ANY)
async def handle_edit_submission(message: types.Message, state: FSMContext):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    key = str(message.from_user.id)
    init_user(message.from_user.id)
    idx = users_data[key].get("_editing_index")
    if idx is None:
        await message.reply("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.finish()
        return
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
    if message.content_type == "text":
        new_post = {"type": "text", "text": message.text}
    elif message.content_type == "photo":
        new_post = {"type": "photo", "file_id": message.photo[-1].file_id, "caption": message.caption}
    elif message.content_type == "video":
        new_post = {"type": "video", "file_id": message.video.file_id, "caption": message.caption}
    else:
        await message.reply("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.finish()
        return
    hist = users_data[key].get("history", [])
    if 0 <= idx < len(hist):
        hist[idx] = new_post
        # trim to 5 if needed
        if len(hist) > 5:
            users_data[key]["history"] = hist[-5:]
        save_users(users_data)
        await message.reply("‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_menu_kb())
    else:
        await message.reply("–û—à–∏–±–∫–∞: —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    users_data[key].pop("_editing_index", None)
    save_users(users_data)
    await state.finish()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'
from aiogram.types import ContentType

@dp.message_handler(state=States.waiting_for_post, content_types=ContentType.ANY)
async def handle_post(message: types.Message, state: FSMContext):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    uid = message.from_user.id
    init_user(uid)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—à–ª–∞ –ª–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞
    if message.media_group_id:
        media_groups[uid].append(message)
        await asyncio.sleep(0.5)  # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        first = media_groups[uid][0]
        if first.photo:
            post = {"type": "photo", "file_id": first.photo[-1].file_id, "caption": first.caption or ""}
        elif first.video:
            post = {"type": "video", "file_id": first.video.file_id, "caption": first.caption or ""}
        else:
            post = {"type": "text", "text": first.caption or ""}
        media_groups[uid].clear()
    else:
        if message.photo:
            post = {"type": "photo", "file_id": message.photo[-1].file_id, "caption": message.caption or ""}
        elif message.video:
            post = {"type": "video", "file_id": message.video.file_id, "caption": message.caption or ""}
        else:
            post = {"type": "text", "text": message.text}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ state
    await state.update_data(post_content=post)

    # –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.reset_state(with_data=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=publish_choice_kb())





# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–°—Ä–∞–∑—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ "–û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"
@dp.callback_query_handler(lambda c: c.data in ("publish_now", "schedule_post"), state="*")
async def cb_publish_choice(callback: types.CallbackQuery, state: FSMContext):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await callback.answer()

    data = await state.get_data()
    post = data.get("post_content")
    if not post:
        await callback.message.answer("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return

    ukey = str(callback.from_user.id)
    user = init_user(callback.from_user.id)
    today = datetime.now().day
    if user.get("last_post_day") != today:
        user["posts_today"] = 0
        user["last_post_day"] = today

    tariff = TARIFFS[user["tariff"]]
    if user.get("posts_today", 0) >= tariff["posts_per_day"]:
        await callback.message.answer(
            "‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –°–º–µ–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=make_tariff_kb(user["tariff"])
        )
        await state.finish()
        return

    if callback.data == "publish_now":
        await send_post_to_group(post)
        user["posts_today"] = user.get("posts_today", 0) + 1
        user.setdefault("history", []).append(post)
        if len(user["history"]) > 5:
            user["history"] = user["history"][-5:]
        save_users(users_data)
        await callback.message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=main_menu_kb())
        await state.finish()
        return

    if callback.data == "schedule_post":
        if not tariff["delay"]:
            await callback.message.answer(
                "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ.",
                reply_markup=main_menu_kb()
            )
            await state.finish()
            return
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-05 14:30):",
            reply_markup=None
        )
        await States.waiting_for_schedule_time.set()



@dp.message_handler(state=States.waiting_for_schedule_time, content_types=ContentType.TEXT)
async def schedule_time_handler(message: types.Message, state: FSMContext):
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    text = message.text.strip()
    try:
        publish_time = datetime.strptime(text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: 2025-09-05 14:30).")
        return

    data = await state.get_data()
    post = data.get("post_content")
    if not post:
        await message.answer("–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return

    scheduled_posts.append({"time": publish_time, "post": post, "user_id": message.from_user.id})
    await message.answer(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_time.strftime('%d-%m-%Y %H:%M')}", reply_markup=main_menu_kb())
    await state.finish()


# ------------------ –ó–∞–ø—É—Å–∫ / –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ------------------
async def on_startup(dp):
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –∑–∞–ø—É—Å—Ç–∏–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

# ---------------- Webhook handler ----------------
async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400)

    update = types.Update(**data)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç –¥–ª—è Aiogram
    Bot.set_current(bot)

    try:
        await dp.process_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: %s", e)
        return web.Response(status=500, text=f"Internal Error: {str(e)}")





# ---------------- Main entry ----------------
async def main():
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ admin –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    init_user(ADMIN_ID)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set: {WEBHOOK_URL}")

    # –°–æ–∑–¥–∞—ë–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", lambda request: web.Response(text="Bot is running!"))

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()

    logger.info(f"Server started at http://0.0.0.0:{PORT}")

    # –ó–∞–ø—É—Å—Ç–∏–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    asyncio.create_task(scheduled_post_worker())

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª (–¥–µ—Ä–∂–∏–º alive)
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())

